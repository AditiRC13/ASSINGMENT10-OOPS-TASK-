Q1, Create a vehicle class with an init method having instance variables as name_of_vehicle, max_speed
and average_of_vehicle.
Q2. Create a child class car from the vehicle class created in Que 1, which will inherit the vehicle class.
Create a method named seating_capacity which takes capacity as an argument and returns the name of
the vehicle and its seating capacity.

class vehicle:
    def __init__(self,name_of_vehicle, max_speed, average_of_vehicle):
        self.name=name_of_vehicle
        self.speed=max_speed
        self.avg=average_of_speed
class seating_capacity(vehicle):
    def seating_capacity(self,seating_capacity):
        return self. name_of_vehicle,capacity
        
Q3. What is multiple inheritance? Write a python code to demonstrate multiple inheritance.
 (*)When a class is derived from more than one base class it is called multiple Inheritance. The derived class            inherits all the features of the base case.
   
class Mammal:
    def mammal_info(self):
        print("Mammals can give direct birth.")

class WingedAnimal:
    def winged_animal_info(self):
        print("Winged animals can flap.")

class Bat(Mammal, WingedAnimal):
    pass

# create an object of Bat class
b1 = Bat()

b1.mammal_info()
b1.winged_animal_info()

Q4. What are getter and setter in python? Create a class and create a getter and a setter method in this
class.
The main purpose of using getters and setters in object-oriented programs is to ensure data encapsulation. Private variables in python are not actually hidden fields like in other object oriented languages. Getters and Setters in python are often used when:

(*)We use getters & setters to add validation logic around getting and setting a value.
(*)To avoid direct access of a class field i.e. private variables cannot be accessed directly or modified by external user.

class name:
    def __init__(self, age = 0):
         self._age = age
      
    # getter method
    def get_age(self):
        return self._age
      
    # setter method
    def set_age(self, x):
        self._age = x
  
rohit = name()
  
# setting the age using setter
rohit.set_age(21)
  
# retrieving age using getter
print(rohit.get_age())
  
print(rohit._age)


Q5.What is method overriding in python? Write a python code to demonstrate method overriding.

Suppose a method is defined in a base class and when we define same named method in the derived class derived from that base class, then it is called Method Overriding.

If the method is called by creating an object of the base class then the method of the base class will run and if the method is called by creating an object of the derived class then the method of the derived class will run .


class Arts_student(Student):
    def __init__ (self, name, age, subject, roll):
        super().__init__(name,age)
        self.subject = subject 
        self.roll_no = roll
 
class Science_student(Student):
    def __init__ (self,name,age,subject):
        super().__init__(name,age)
        self.subject = subject